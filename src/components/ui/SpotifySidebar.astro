---
import Icon from "./Icon.astro"
---

<aside class="w-80 bg-white dark:bg-dark-200 border-r border-gray-200 dark:border-dark-300 order-last">
    <div id="auth-page" class="flex justify-center items-center h-full">
        <button id="auth-button" class="bg-primary-500 text-white font-bold py-2 px-4 rounded">
            Authenticate Spotify
        </button>
    </div>
    <div id="spotify-page" class="flex flex-col items-center p-4 hidden">
        <img src="https://placehold.co/64" alt="Image description" class="w-64 h-64 object-cover rounded-lg mb-4">
        <h2 class="text-xl font-semibold mb-2">Main Text</h2>
        <p class="text-sm text-gray-400">Smaller Text</p>
        <div class="flex space-x-4 mt-4">

            <button id="previous">
                <Icon name="skip_previous" class="w-6 h-6 text-gray-500 cursor-pointer" />
            </button>

            <button id="pause">
                <Icon name="pause" class="w-6 h-6 text-gray-500 cursor-pointer" />
            </button>    
            
            <button id="play" class="hidden">
                <Icon name="play_arrow" class="w-6 h-6 text-gray-500 cursor-pointer" />
            </button>

            <button id="next">
                <Icon name="skip_next" class="w-6 h-6 text-gray-500 cursor-pointer" />
            </button>

        </div>
        <div class="flex items-center space-x-4 mt-4">

            <button id="mute-button" class="w-6 h-6 text-gray-500 cursor-pointer">
                <Icon name="volume_up" class="w-6 h-6" />
            </button>

            <button id="unmute-button" class="w-6 h-6 text-gray-500 cursor-pointer hidden">
                <Icon name="volume_off" class="w-6 h-6" />
            </button>

            <input id="volume-slider" type="range" min="0" max="100" value="50" class="w-full">
        </div>
    </div>
</aside>

<script>
    import { sendWebSocketMessage } from "../../utils/websocket";

    const authButton = document.getElementById('auth-button');
    authButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_auth' });
        document.getElementById('auth-page').classList.add('hidden');
        document.getElementById('spotify-page').classList.remove('hidden');
    });

    const playButton = document.getElementById('play');
    const pauseButton = document.getElementById('pause');
    const previousButton = document.getElementById('previous');
    const nextButton = document.getElementById('next');
    const muteButton = document.getElementById('mute-button');
    const unmuteButton = document.getElementById('unmute-button');
    const volumeSlider = document.getElementById('volume-slider') as HTMLInputElement;

    playButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_play' });
        playButton.classList.add('hidden');
        pauseButton.classList.remove('hidden');
    });

    pauseButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_pause' });
        pauseButton.classList.add('hidden');
        playButton.classList.remove('hidden');
    });

    previousButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_previous' });
    });

    nextButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_next' });
    });

    let last_volume = '100';

    muteButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_mute' });
        volumeSlider.value = '0';
        muteButton.classList.add('hidden');
        unmuteButton.classList.remove('hidden');
    });

    unmuteButton.addEventListener('click', () => {
        sendWebSocketMessage({ type: 'spotify_unmute' });
        volumeSlider.value = last_volume;
        muteButton.classList.remove('hidden');
        unmuteButton.classList.add('hidden');
    });

    let volumeTimeout;
    volumeSlider.addEventListener('input', () => {
        clearTimeout(volumeTimeout);
        volumeTimeout = setTimeout(() => {
            sendWebSocketMessage({ type: 'spotify_volume', data: { volume: parseInt(volumeSlider.value, 10) } });
            last_volume = volumeSlider.value;
        }, 300);
    });

    window.addEventListener('freya:spotify_update', (event) => {
        const { song_name, artists, cover_image } = (event as CustomEvent).detail;
        if (!song_name || !artists || !cover_image) {
            return;
        }
        (document.querySelector('#spotify-page img') as HTMLImageElement).src = cover_image;
        (document.querySelector('#spotify-page img') as HTMLImageElement).alt = song_name;
        document.querySelector('#spotify-page h2').textContent = song_name;
        document.querySelector('#spotify-page p').textContent = artists;
    });
</script>