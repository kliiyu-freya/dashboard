---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import Card from '../components/Card.astro';
import Toggle from '../components/ui/Toggle.astro';
---

<DashboardLayout title="Settings">
  <div class="space-y-6 max-w-2xl">

    <Card title="Network Settings">
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <span>Core IP Address</span>
          <input type="text" id="core-ip" class="w-1/2 p-2 border rounded-md" placeholder="localhost" value=""/>
        </div>
        <div class="flex items-center justify-between">
          <span>Core Port</span>
          <input type="text" id="core-port" class="w-1/2 p-2 border rounded-md" placeholder="6672" value=""/>
        </div>
        <div class="flex items-center justify-between">
          <button id="update-connection-address-button" class="px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600">
            Update
          </button>
        </div>
      </div>
    </Card>
    
    
    <Card title="General Settings">
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <span>Color Theme</span>
          <button class="text-primary-600 dark:text-primary-500">
            <span class="material-icons-outlined">dark_mode</span>
          </button>
        </div>
        <div id="notifications-toggle" class="flex items-center justify-between">
          <span>Notifications</span>
          <Toggle id="notifications-toggle" checked=true/>
        </div>
      </div>
    </Card>

  </div>
</DashboardLayout>

<script>
  function getSettingsCookie() {
    const settingsCookie = document.cookie.split('; ').find(row => row.startsWith('settings='));
    let settings = {};
    if (settingsCookie) {
        try {
            settings = JSON.parse(decodeURIComponent(settingsCookie.split('=')[1]));
        } catch (error) {
            console.error('Failed to parse settings cookie:', error);
        }
    }
    return settings;
  }

  function updateSettingsCookie(settings: Record<string, any>) {
    document.cookie = `settings=${encodeURIComponent(JSON.stringify(settings))}; path=/; expires=Fri, 31 Dec 9999 23:59:59 GMT`;
  }
  
  function handleNotificationToggle(newState: boolean) {
    let settings = getSettingsCookie();
    settings["notifications"] = newState;
    updateSettingsCookie(settings);
    console.log(`Notifications are now ${newState ? 'enabled' : 'disabled'}`);
  }

  const notificationsToggle = document.getElementById('notifications-toggle') as HTMLInputElement;
  notificationsToggle.addEventListener('change', (event) => {
    handleNotificationToggle((event.target as HTMLInputElement).checked);
  });
  

  document.getElementById('update-connection-address-button').addEventListener('click', function() {
    const coreIp = (document.getElementById('core-ip') as HTMLInputElement).value;
    const corePort = (document.getElementById('core-port') as HTMLInputElement).value;
    if (coreIp === '' || corePort === '') {
      return;
    }

    console.log(`Updating connection address to ${coreIp}:${corePort}`);
    const expires = new Date();
    expires.setFullYear(expires.getFullYear() + 100);
    document.cookie = `coreIp=${coreIp}; path=/; expires=Fri, 31 Dec 9999 23:59:59 GMT`;
    document.cookie = `corePort=${corePort}; path=/; expires=Fri, 31 Dec 9999 23:59:59 GMT`;
    location.reload();
  });

  window.addEventListener('DOMContentLoaded', (event) => {
    const coreIpCookie = document.cookie.split('; ').find(row => row.startsWith('coreIp='));
    const corePortCookie = document.cookie.split('; ').find(row => row.startsWith('corePort='));

    if (coreIpCookie) {
      const coreIp = coreIpCookie.split('=')[1];
      (document.getElementById('core-ip') as HTMLInputElement).value = coreIp;
    }

    if (corePortCookie) {
      const corePort = corePortCookie.split('=')[1];
      (document.getElementById('core-port') as HTMLInputElement).value = corePort;
    }
  });
</script>
