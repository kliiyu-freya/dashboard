---
import DashboardLayout from '../layouts/DashboardLayout.astro';
import Card from '../components/ui/Card.astro';
import Toggle from '../components/ui/Toggle.astro';
import Icon from '../components/ui/Icon.astro';

import SyncSettings from '../components/settings/SyncSettings.astro';
import NetworkSettings from '../components/settings/NetworkSettings.astro';
import SpotifySettings from '../components/settings/SpotifySettings.astro';
import WeatherSettings from '../components/settings/WeatherSettings.astro';
---

<DashboardLayout title="Settings">
  <div class="space-y-6 max-w-2xl">

    <SyncSettings />

    <NetworkSettings />
    
    <Card title="General Settings">
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <span>Color Theme</span>
          <button class="text-primary-600 dark:text-primary-500">
            <Icon name="dark_mode" class="text-primary-500" />
          </button>
        </div>
        <div id="notifications-toggle" class="flex items-center justify-between">
          <span>Notifications</span>
          <Toggle id="notifications-toggle" checked=true/>
        </div>
      </div>
    </Card>

    <SpotifySettings />
    <WeatherSettings />

  </div>
</DashboardLayout>

<script>
  function getSettings() {
    const settings = localStorage.getItem('settings');
    let settingsDict = {};
    if (settings) {
        try {
          settingsDict = JSON.parse(settings);
        } catch (error) {
            console.error('Failed to parse settings:', error);
        }
    }
    return settingsDict;
  }

  function updateSettings(settings: Record<string, any>) {
    localStorage.setItem('settings', JSON.stringify(settings));
  }
  
  function handleNotificationToggle(newState: boolean) {
    let settings = getSettings();
    settings["notifications"] = newState;
    updateSettings(settings);
    console.log(`Notifications are now ${newState ? 'enabled' : 'disabled'}`);
  }

  const notificationsToggle = document.getElementById('notifications-toggle') as HTMLInputElement;
  
  window.addEventListener('DOMContentLoaded', (event) => {
    const settings = getSettings();
    if (settings.hasOwnProperty("notifications")) {
      window.dispatchEvent(new CustomEvent('toggleButton', { 
        detail: { id: 'notifications-toggle', checked: settings["notifications"] } 
      }));
    }
  });

  notificationsToggle.addEventListener('change', (event) => {
    handleNotificationToggle((event.target as HTMLInputElement).checked);
  });
</script>
